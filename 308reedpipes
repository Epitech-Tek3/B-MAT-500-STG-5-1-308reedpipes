#!/usr/bin/env python3

from sys import *
from math import *

class attribuate():
    abscisse = [0, 5, 10, 15, 20]
    ordonner = []
    vector = [0, None, None, None, 0]
    total = []
    value = {'r0': 0, 'r5': 0, 'r10': 0, 'r15': 0, 'r20': 0, 'n': 0}    
    def __init__(self, argument, total=0):
        for arg, i in zip(self.value, range(1, len(argument))):
            self.value[arg] = float(argument[i])
            if self.value[arg] is not self.value['n']:
                self.ordonner.append(self.value[arg])

    def collecteValue(self):
        firstValue = 6 * (self.value['r0'] + self.value['r10'] - 2 * self.value['r5']) / 50
        secondValue = 6 * (self.value['r5'] + self.value['r15'] - 2 * self.value['r10']) / 50
        thirdValue = 6 * (+ self.value['r10'] + self.value['r20'] - 2 * self.value['r15']) / 50
        self.vector[2] = (secondValue - (firstValue + thirdValue) / 4) * 4 / 7
        self.vector[1] = firstValue / 2 - 0.25 * self.vector[2]
        self.vector[3] = thirdValue / 2 - 0.25 * self.vector[2]
        for decimal in range(int(self.value['n'])):
            X = 20 / (self.value['n'] - 1) * decimal
            i = int((X - 0.01) / 5) + 1
            total = (- self.vector[i - 1] / 30 * pow(X - self.abscisse[i], 3)
                      + self.vector[i] / 30 * pow(X - self.abscisse[i - 1], 3
                      - (self.ordonner[i - 1] / 5 - 5 / 6 * self.vector[i - 1])
                      * (X - self.abscisse[i])
                      + (self.ordonner[i] / 5 - 5 / 6 * self.vector[i])
                      * (X - self.abscisse[i - 1])))
            self.total.append(total)

    def printValue(self):
        print("vector total: [{:.1f}, {:.1f}, {:.1f}, {:.1f}, {:.1f}]".format(
            self.vector[0] if round(self.vector[0], 1) != 0 else 0,
            self.vector[1] if round(self.vector[1], 1) != 0 else 0,
            self.vector[2] if round(self.vector[2], 1) != 0 else 0,
            self.vector[3] if round(self.vector[3], 1) != 0 else 0,
            self.vector[4] if round(self.vector[4], 1) != 0 else 0))
        for i in range(int(self.value['n'])):
            print("abscisse: {:.1f} cm\tradius: {:.1f} cm".format(
                20 / (self.value['n'] - 1) * i, self.total[i]))


def main():
    if len(argv) != 7:
        exit(84)
    obj = attribuate(argv)
    obj.collecteValue()
    obj.printValue()

if __name__ == "__main__":
    try:
        main()
    except BaseException as error:
        stderr.write(str(type(error).__name__) + ": {}\n".format(error))
        exit(84)